#!/usr/bin/env bash

SCRIPTPATH="${0}"
[ ${SCRIPTPATH} = 'bash' ] || [ ${SCRIPTPATH} = '/bin/bash' ] && SCRIPTPATH="${BASH_SOURCE}"

APPDIR=$(dirname $(readlink -f "${SCRIPTPATH}"))

source ${APPDIR}/lib/libapp

APP="palias"
APPUSAGE="${APPUSAGE} project action"
PROJECTSDIR="/data/"

current_dir=$(pwd)

project=
action=
args=

function appargscustom {
    project="${1}"
    shift
    action="${1}"
    shift
    args="$@"
}

appargs "$@"

[ -z "${project}" ] && return $(apperror "Project name is mandatory" 1)
projectpath="${PROJECTSDIR}${project}/"
[ -d "${projectpath}" ] || return $(apperror "Project '${project}' not exists" 1)
[ -z "${action}" ] && action="dir"

case "${action}" in
    dir)
        cd "${projectpath}"
        return 0
        ;;
    start)
        [ -e "${projectpath}resources/docker/docker-compose.yml" ] || return $(apperror "No configuration into '${projectpath}resources/docker/docker-compose.yml'")
        cd "${projectpath}resources/docker/"
        docker-compose -p "${project}" build
        docker-compose -p "${project}" up
        ;;
    cmd|command)
        [ -e "${projectpath}resources/docker/docker-compose.yml" ] || return $(apperror "No configuration into '${projectpath}resources/docker/docker-compose.yml'")
        cd "${projectpath}resources/docker/"
        container_name=$(echo $args | cut -d' ' -f1)
        if [ ! -z "${container_name}" ]
        then
            container_exists=$(docker-compose -p "${project}" ps 2>/dev/null | grep "${container_name}" | wc -l)
            [ ${container_exists} -ne 1 ] && container_name=
        fi
        if [ -z "${container_name}" ]
        then
            container_name=$(docker-compose -p "${project}"  ps 2>/dev/null | tail -n+3 | head -n1 | cut -d' ' -f1)
        fi
        container_running=$(docker-compose -p "${project}" ps 2>/dev/null | grep "${container_name}" | grep " Up " | wc -l)
        [ ${container_running} -ne 1 ] && return $(apperror "Container '${container_name}' not running")

        docker exec -it ${container_name} ${args}
        ;;
    *)
        return $(apperror "Invalid action: '$2'" 1)
        ;;
esac

cd "${current_dir}"
