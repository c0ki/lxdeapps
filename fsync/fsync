#!/bin/bash

APPDIR=$(dirname $(readlink -f "$0"))

source ${APPDIR}/lib/libapp
source ${APPDIR}/lib/libgtk

APP="Fsync"
APPUSAGE="${APPUSAGE} [-s|--source] sourcepath [-d|--destintaion] destinationpath"

src=
dest=

function appargscustom {
    while [ $# -ne 0 ] ; do
        case "$1" in
            --source|-s)
                shift
                if [ -z "$1" ] ; then
                    apperror "Incomplete argument: --source|-s"
                fi
                src="$1"
                ;;
            --destination|-d)
                shift
                if [ -z "$1" ] ; then
                    apperror "Incomplete argument: --destination|-d"
                fi
                dest="$1"
                ;;
            *)
                apperror "Invalid arguments: '$1'"
                ;;
        esac
        shift
    done
}

appargs "$@"

[ -z "${src}" ] && src=$(appgetdir "Select directory to sync")

# Sync via samba
mountdir=
if [[ "${src}" =~ ^smb:// ]]
then
    option=
    [[ "${src}" =~ ^smb://([^/]*)@(.*)$ ]] && option="username=${BASH_REMATCH[1]}," && src="//${BASH_REMATCH[2]}"
    [[ "${option}" =~ ^(.*):(.*)$ ]] && option="${BASH_REMATCH[1]},password=${BASH_REMATCH[2]}"

    smbsrc="${src}"
    smbsrcdir=$(dirname "${smbsrc}")
    smbsrcfile=$(basename "${smbsrc}")
    mountdir=$(mktemp -d)
    src="${mountdir}/${smbsrcfile}"
    sudo mount -t cifs "${smbsrcdir}" "${mountdir}" -o ${option}file_mode=0777,dir_mode=0777
fi

[ -e "${src}" ] || apperror "Source path '${src}' not exists"

[ -z "${dest}" ] && dest=$(appgetdir "Select destination directory")
[ -e "${dest}" ] || apperror "Destination path '${dest}' not exists"

[ -d "${src}" ] && [[ ! "${src}" =~ .*\/$ ]] && src="${src}/"
[[ ! "${dest}" =~ .*\/$ ]] && dest="${dest}/"

appinfo "Synchronization from '${src}' to '${dest}'"

# TODO set current sync file on progress bar
appprogress "pulsate" "# Sync ${src} >> ${dest}" "0"
resultfiles=`rsync -vv -tzur "${src}" "${dest}" | tail -n+3 | head -n-4`
appprogress "100"

recentsfile=$(tempfile)
srcfile=$(tempfile)
destfile=$(tempfile)

OLDIFS=$IFS;IFS=$'\n'
for result in ${resultfiles}
do
    filename=${result/ is newer/}
    filename=${filename/ is uptodate/}
    echo "${filename}" >> ${srcfile}
    [[ "${result}" =~ .*\ is\ newer ]] && echo "${filename}" >> ${recentsfile}
done

for file in $(find "${dest}" -type f)
do
    filerelative=${file#$dest}
    grep -Fxq "${filerelative}" ${srcfile} || echo "${filerelative}" >> ${destfile}
done
IFS=$OLDIFS

# Sort files lines
[ -s ${srcfile} ] && sort ${srcfile} -o ${srcfile}
[ -s ${recentsfile} ] && sort ${recentsfile} -o ${recentsfile}
[ -s ${destfile} ] && sort ${destfile} -o ${destfile}

#echo "Sources files"
#cat $srcfile
#echo "====================="
#echo "File more recent"
#cat $recentsfile
#echo "====================="
#echo "File no exists"
#cat $destfile

if [ -s ${recentsfile} ] || [ -s ${destfile} ]
then
    content=()
    OLDIFS=$IFS;IFS=$'\n'
    for file in $(cat ${recentsfile})
    do
        content+=("FALSE" "${file}" "> ${file}")
    done
    for file in $(cat ${destfile})
    do
        content+=("FALSE" "${file}" "! ${file}")
    done
    IFS=$OLDIFS

    files=$(appchoice "Some files are not synced on all\nCheck to sync them" "${content[@]}")
    if [ ! -z "${files}" ]
    then
        total=$(grep -o "|" <<< "${files}" | wc -l)
        processed=0
        failed=0
        percent=0
        OLDIFS=$IFS;IFS="|"
        for file in ${files}
        do
            appprogress "# ${file}" "${percent}"
            rsync -tzur "${dest}${file}" "${src}$(dirname $file})"
            [ $? -ne 0 ] && failed=$((${failed}+1))
            processed=$((${processed}+1))
            percent=$((${processed}*100/${total}))
        done
        IFS=$OLDIFS
        appprogress "100"
    fi
fi

[ ! -z "${mountdir}" ] && sudo umount "${mountdir}"

rm -rf ${recentsfile} ${srcfile} ${destfile} ${mountdir}

appnotify "Sync success"
